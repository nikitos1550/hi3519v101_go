/*
 * Camera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		"GET",
		"/api/v1/",
		Index,
	},

	{
		"Apiinfo",
		strings.ToUpper("Get"),
		"/api/v1/",
		Apiinfo,
	},

	{
		"ChannelGet",
		strings.ToUpper("Get"),
		"/api/v1/channel",
		ChannelGet,
	},

	{
		"ChannelIdEnableDelete",
		strings.ToUpper("Delete"),
		"/api/v1/channel/{id}/enable",
		ChannelIdEnableDelete,
	},

	{
		"ChannelIdEnablePost",
		strings.ToUpper("Post"),
		"/api/v1/channel/{id}/enable",
		ChannelIdEnablePost,
	},

	{
		"ChannelIdGet",
		strings.ToUpper("Get"),
		"/api/v1/channel/{id}",
		ChannelIdGet,
	},

	{
		"ChannelIdPatch",
		strings.ToUpper("Patch"),
		"/api/v1/channel/{id}",
		ChannelIdPatch,
	},

	{
		"DebugGet",
		strings.ToUpper("Get"),
		"/api/v1/debug",
		DebugGet,
	},

	{
		"DebugMppGet",
		strings.ToUpper("Get"),
		"/api/v1/debug/mpp",
		DebugMppGet,
	},

	{
		"EncoderGet",
		strings.ToUpper("Get"),
		"/api/v1/encoder",
		EncoderGet,
	},

	{
		"EncoderH264Get",
		strings.ToUpper("Get"),
		"/api/v1/encoder/h264",
		EncoderH264Get,
	},

	{
		"EncoderH264IdDelete",
		strings.ToUpper("Delete"),
		"/api/v1/encoder/h264/{id}",
		EncoderH264IdDelete,
	},

	{
		"EncoderH264IdGet",
		strings.ToUpper("Get"),
		"/api/v1/encoder/h264/{id}",
		EncoderH264IdGet,
	},

	{
		"EncoderH264IdPatch",
		strings.ToUpper("Patch"),
		"/api/v1/encoder/h264/{id}",
		EncoderH264IdPatch,
	},

	{
		"EncoderH264Post",
		strings.ToUpper("Post"),
		"/api/v1/encoder/h264",
		EncoderH264Post,
	},

	{
		"EncoderH265Get",
		strings.ToUpper("Get"),
		"/api/v1/encoder/h265",
		EncoderH265Get,
	},

	{
		"EncoderH265IdDelete",
		strings.ToUpper("Delete"),
		"/api/v1/encoder/h265/{id}",
		EncoderH265IdDelete,
	},

	{
		"EncoderH265IdGet",
		strings.ToUpper("Get"),
		"/api/v1/encoder/h265/{id}",
		EncoderH265IdGet,
	},

	{
		"EncoderH265IdPatch",
		strings.ToUpper("Patch"),
		"/api/v1/encoder/h265/{id}",
		EncoderH265IdPatch,
	},

	{
		"EncoderH265Post",
		strings.ToUpper("Post"),
		"/api/v1/encoder/h265",
		EncoderH265Post,
	},

	{
		"EncoderJpegGet",
		strings.ToUpper("Get"),
		"/api/v1/encoder/jpeg",
		EncoderJpegGet,
	},

	{
		"EncoderJpegIdDelete",
		strings.ToUpper("Delete"),
		"/api/v1/encoder/jpeg/{id}",
		EncoderJpegIdDelete,
	},

	{
		"EncoderJpegIdGet",
		strings.ToUpper("Get"),
		"/api/v1/encoder/jpeg/{id}",
		EncoderJpegIdGet,
	},

	{
		"EncoderJpegIdPatch",
		strings.ToUpper("Patch"),
		"/api/v1/encoder/jpeg/{id}",
		EncoderJpegIdPatch,
	},

	{
		"EncoderJpegPost",
		strings.ToUpper("Post"),
		"/api/v1/encoder/jpeg",
		EncoderJpegPost,
	},

	{
		"EncoderMjpegGet",
		strings.ToUpper("Get"),
		"/api/v1/encoder/mjpeg",
		EncoderMjpegGet,
	},

	{
		"EncoderMjpegIdDelete",
		strings.ToUpper("Delete"),
		"/api/v1/encoder/mjpeg/{id}",
		EncoderMjpegIdDelete,
	},

	{
		"EncoderMjpegIdGet",
		strings.ToUpper("Get"),
		"/api/v1/encoder/mjpeg/{id}",
		EncoderMjpegIdGet,
	},

	{
		"EncoderMjpegIdPatch",
		strings.ToUpper("Patch"),
		"/api/v1/encoder/mjpeg/{id}",
		EncoderMjpegIdPatch,
	},

	{
		"EncoderMjpegPost",
		strings.ToUpper("Post"),
		"/api/v1/encoder/mjpeg",
		EncoderMjpegPost,
	},

	{
		"StreamerGet",
		strings.ToUpper("Get"),
		"/api/v1/streamer",
		StreamerGet,
	},

	{
		"StreamerJpegOverHttpGet",
		strings.ToUpper("Get"),
		"/api/v1/streamer/jpeg-over-http",
		StreamerJpegOverHttpGet,
	},

	{
		"StreamerRtspGet",
		strings.ToUpper("Get"),
		"/api/v1/streamer/rtsp",
		StreamerRtspGet,
	},

	{
		"StreamerVideoToStorageGet",
		strings.ToUpper("Get"),
		"/api/v1/streamer/video-to-storage",
		StreamerVideoToStorageGet,
	},

	{
		"Systeminfo",
		strings.ToUpper("Get"),
		"/api/v1/system",
		Systeminfo,
	},
}
